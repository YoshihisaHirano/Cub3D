#include "cub3D.h"

double find_dst(t_config *config, int angle, int column)
{
	double	h_dst;
	double	v_dst;

	h_dst = dst_to_horizontal(config->tables, config->player, config->map, angle);
	v_dst = dst_to_vertical(config->tables, config->player, config->map, angle);
	if (v_dst < h_dst)
		return (v_dst / config->tables->fish_table[column]);
	return (h_dst / config->tables->fish_table[column]);
}

int	wall_height(double dist)
{
	return ((int)(TILE_SIDE * PLAYER_PLANE_DST / dist));
}

void	draw_plane(t_config *conf)
{
	int		column;
	int		curr_angle;
	double	dist;
	int		wall_top;
	int		wall_bottom;

	column = 0;
	curr_angle = conf->player->angle - ANGLE30;
	if (curr_angle < 0)
		curr_angle += ANGLE360;
	while (column < PLANE_WIDTH)
	{
		dist = find_dst(conf, curr_angle, column);
		wall_top = (int)(PLANE_CENTER - (wall_height(dist) / 2));
		if (wall_top < 0)
			wall_top = 0;
		wall_bottom = (int)(PLANE_CENTER + (wall_height(dist) / 2));
		if (wall_bottom > PLANE_HEIGHT)
			wall_bottom = PLANE_HEIGHT - 1;
		draw_column(conf->image, column, wall_top, wall_bottom - wall_top + 1);
		column++;
		curr_angle++;
		if (curr_angle > ANGLE360)
			curr_angle -= ANGLE360;
	}
}

int main()
{
	t_config	*config;
	t_win		win;

	init_win(&win);
	config = create_config(&win);
	draw_plane(config);
	mlx_put_image_to_window(win.mlx_ptr, win.win_ptr, config->image->img, 0, 0);
	mlx_loop(win.mlx_ptr);
	return (0);
}